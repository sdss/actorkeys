# This is the initial test keys dictionary for APOGEE
#
KeysDictionary("apogee", (1,0), *(
    # Misc
    Key("text", String(), help="text for humans"),
    Key("version", String(), help="version string derived from svn info."),
    Key('dayNumber', Int(), help="day number ...(more details wanted!)"),    

    # Camera
    Key("arrayPower",
        Enum("ON","OFF","?"),
        help="Commanded array power."),
    Key("cameraState",
        Enum("Exposing", "Done", "Stopping", "Stopped", "Failed", name="expState", help="state of exposure"),
        help="A simplified version of exposureState that is output by the status command",
    ),
    Key("dspFiles",
        String()*(1,10),
        help="List of available DSP files"),
    Key("dspload",
        String(),
        help="Name of DSP file currently in use"),
    Key("exposureState",
        Enum("Exposing", "Done", "Stopping", "Stopped", "Failed", name="expState", help="state of exposure"),
        String(name="expType", help="type of exposure (object argument)"),
        Int(name="nReads", help="total number of UTR reads requested"),
        String(name="expName", help="name of exposure"),
    ),
    Key("exposureWroteFile",
        String(name="wrotefile"),
        help="Name of FITS file just written to disk"),
    Key("exposureWroteSummary",
        String(name="wrotesummary"),
        help="Name of CDS FITS file just written to disk"),
    Key("utrReadState",
        String(name="expName", help="name of exposure"),
        Enum("Reading", "Saving", "Done", "Failed", name="readState", help="state of UTR read"),
        Int(name="readNum", help="number of current UTR read, starting from 1"),
        Int(name="nReads", help="total number of UTR reads requested"),
        Float(name="elapsedReadTime", units="sec", help="elapsed time for current UTR read"),
        Float(name="totReadTime", units="sec", help="total time for a UTR read"),
    ),
    Key("utrReadTime", Float(units="sec"), help="time required for a UTR read"),


    # Collimator
    Key("collOrient",
        Float(name="piston", units="microns", help="+ brings collimator towards the instrument"),
        Float(name="pitch", units="pixels", help="+ tips the beam down"),
        Float(name="yaw", units="pixels", help="+ tips the beam to the right as seen by the collimator"),
        help="Collimator orientation"),
    Key("collMountPos",
        Float(units="microns")*3,
        help="Current collimator actuator position"),
    Key("collMountLimits",
        Float(units="microns")*2,
        help="Reverse, forward software limits for collimator actuator position"),
    Key("collLimitSwitch",
        Bool("false", "true", invalid="?")*6,
        help="Home 1, forward 1, home 2, forward 2, home 3, forward 3 limit switch activated?"),
    Key("collIndexer",
        Bool("Off", "On"),
        help="Is the collimator controller available (on and communicating)?"),

    # Dither
    Key("ditherPosition",
        Float(units="pixels"),
        Enum("A", "B", "?", help="name of current position; ? if not a named position"),
        help="Current dither position"),
    Key("ditherNamedPositions",
        Float(units="pixels")*2,
        help="Pixel positions of A, B named positions"),
    Key("ditherLimits",
        Float(units="pixels")*2,
        help="Reverse, forward software limits for dither position"),
    Key("ditherLimitSwitch",
        Bool("false", "true", invalid="?")*2,
        help="Home, forward dither limit switch activated?"),
    Key("ditherIndexer",
        Bool("Off", "On"),
        help="Is the dither controller available (on and communicating)?"),

    # Telemetry
    Key("tempNames", 
        String()*20,
        help="Location name of each temperature sensor"),
    Key("temps", 
        Float(units="K")*20,
        help="temperatures inside apogee"),
    Key("tempInterval", 
        Float(units="sec"),
        help="Reporting interval of the temperatures and alarms; 0.0 turns automatic reporting off"),
    Key("tempAlarms", 
        Bool("0", "1")*20,
        help="Alarm status for each temperature sensor; 0=ok, 1=alarm"),
    Key("tempThresholds", 
        Float(units="K")*20,
        help="Threshold for each sensor (degreesK)"),
    Key("tempMin", 
        Float(units="K")*20,
        help="Expected minimum values (degreesK)"),
    Key("tempMax", 
        Float(units="K")*20,
        help="Expected maximum values (degreesK)"),
    Key("vacuum", 
        Float(units="Torr"),
        help="Current vacumm; NaN if not available (Torr)"),
    Key("vacuumInterval", 
        Float(units="sec"),
        help="Reporting interval of the vacuum and alarms; 0.0 turns automatic reporting off"),
    Key("vacuumAlarm", 
        Bool("0", "1"),
        help="Vacuum Alarm state; 0=ok, 1=alarm"),
    Key("vacuumThreshold", 
        Float(units="Torr"),
        help="Vacuum Threshold"),
    Key("vacuumLimits", 
        Float(units="Torr")*2,
        help="Expected Low, High Vacuum"),
    Key("ln2Level", 
        Float(units="%"),
        help="Current level of LN2 in instrument; NaN if not available"),
    Key("ln2Interval", 
        Float(units="sec"),
        help="Reporting interval of the LN2 level and alarms; 0.0 turns automatic reporting off"),
    Key("ln2Alarm", 
        Bool("0", "1"),
        help="LN2 Level Alarm state; 0=ok, 1=alarm"),
    Key("ln2Threshold", 
        Float(units="%"),
        help="LN2 Level below which an Alarm is triggered"),
    Key("ln2Limits", 
        Float(units="%")*2,
        help="Expected Low, High LN2 level"),

))
